def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_win(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    return [player, player, player] in win_conditions

def get_move(player):
    while True:
        try:
            move = int(input(f"Player {player}, enter your move (1-9): ")) - 1
            if move < 0 or move > 8:
                print("Invalid move. Please enter a number between 1 and 9.")
            elif board[move // 3][move % 3] != " ":
                print("This space is already taken. Please choose another space.")
            else:
                return move
        except ValueError:
            print("Invalid input. Please enter a number.")

def play_game():
    global board
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    
    for _ in range(9):
        print_board(board)
        move = get_move(current_player)
        board[move // 3][move % 3] = current_player
        
        if check_win(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            return
        
        current_player = "O" if current_player == "X" else "X"
    
    print_board(board)
    print("It's a tie!")

if __name__ == "__main__":
    play_game()
